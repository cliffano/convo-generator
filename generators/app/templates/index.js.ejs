'use strict';

const convo = require('convo-node');
const <%= config.id() %>Api = require('<%= config.convoSpec.middlewares.openapi3_cloudfunctions.openapi3.node_modules.api %>');
<%
  const apis = config.apis();
  const apiKeys = Object.keys(apis);
  for (var i = 0, len = apiKeys.length; i < len; i++) {
%>
const <%= apiKeys[i]  %> = new <%= config.id() %>Api.<%= apis[apiKeys[i]] %>();
<%= apiKeys[i]  %>.apiClient.basePath = '<%= config.convoSpec.middlewares.openapi3_cloudfunctions.cloudfunctions.url %>';
<%
  }
%>

exports.dialogflow = (request, response) => {

  function apiCallback(reply, done) {
    // The callback signature with error, data, and response is defined by OpenAPI Generator.
    return function(error, data, _response) {
      console.log('Sending reply: ' + reply);
      const replyPayload = convo.dialogFlow.payload.createReplyPayload(reply);
      done(null, replyPayload);
    }
  }

  function httpCallback(done) {
    const conversationName = convo.dialogFlow.payload.getConversationNameFromPayload(request.body);
    const conversationLanguage = convo.dialogFlow.payload.getConversationLanguageFromPayload(request.body);
    console.log('Receiving conversation: %s, using language: %s', conversationName, conversationLanguage);
    <%
      const conversations = config.conversations();
      console.log(conversations);
      for (var i = 0, iLen = conversations.length; i < iLen; i++) {
    %>
    <% if (i > 0) { %>else<% } %> if (conversationName === '<%= conversations[i].name %>') {
      <%
        const languages = Object.keys(conversations[i].reply);
        for (var j = 0, jLen = languages.length; j < jLen; j++) {
      %>
      <% if (j > 0) { %>else<% } %> if (conversationLanguage === '<%= languages[j] %>') {
        var args = [];
        args.push(apiCallback('<%= conversations[i].reply[languages[j]] %>', done));
        <%= conversations[i].api %>.<%= conversations[i].method %>(...args);
      }
      <%
        }
      %>
      else {
        const replyPayload = convo.dialogFlow.payload.createReplyPayload('Unsupported reply language: ' + conversationLanguage);
        done(null, replyPayload);
      }
    }
    <%
      }
    %>
    else {
      const replyPayload = convo.dialogFlow.payload.createReplyPayload('Unsupported conversation: ' + conversationName);
      done(null, replyPayload);
    }
  }

  convo.dialogFlow.http.handle(request, response, httpCallback);
};

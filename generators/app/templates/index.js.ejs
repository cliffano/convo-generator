'use strict';

const convo = require('convo-node');
const <%= config.id() %>Client = require('<%= config.convoSpec.middlewares.openapi3_cloudfunctions.openapi3.node_modules.api %>');
<% if (config.convoSpec.middlewares.openapi3_cloudfunctions.openapi3.node_modules.helper) { %>
const <%= config.id() %>Helper = require('<%= config.convoSpec.middlewares.openapi3_cloudfunctions.openapi3.node_modules.helper %>');
<% } %>
var apis = {};
<%
  /******************************************************************
   * Declare all APIs defined in OpenAPI3 spec, i.e. the tags and a default API (if any)
   ******************************************************************/
  const apis = config.apis();
  const apiKeys = Object.keys(apis);
  for (var i = 0, len = apiKeys.length; i < len; i++) {
%>
const <%= apiKeys[i] %> = new <%= config.id() %>Client.<%= apis[apiKeys[i]] %>();
<%= apiKeys[i]  %>.apiClient.basePath = '<%= config.convoSpec.middlewares.openapi3_cloudfunctions.cloudfunctions.target_url %>';
apis.<%= apiKeys[i] %> = <%= apiKeys[i] %>;
<%
  }
%>

const <%= config.id() %>Instance = <%= config.id() %>Client.ApiClient.instance;
<%
  /******************************************************************
   * Set username and password to basic HTTP auths
   ******************************************************************/
  if (config.hasBasicHttpAuths()) {
    const basicHttpAuths = config.basicHttpAuths();
    for (var i = 0, len = basicHttpAuths.length; i < len; i++) {
%>
var <%= config.id() %>Auth = <%= config.id() %>Instance.authentications['<%= basicHttpAuths[i] %>'];
<%= config.id() %>Auth.username = '<%= config.convoSpec.middlewares.openapi3_cloudfunctions.cloudfunctions.target_username %>';
<%= config.id() %>Auth.password = '<%= config.convoSpec.middlewares.openapi3_cloudfunctions.cloudfunctions.target_password %>';
<%
    }
  }
%>

exports.dialogflow = (request, response) => {

  function apiCallback(reply, done) {
    // The callback signature with error, data, and response is defined by OpenAPI Generator.
    return function(error, data, _response) {
      console.log('Sending reply: ' + reply);
      const replyPayload = convo.dialogFlow2.payload.createReplyPayload(reply);
      done(null, replyPayload);
    };
  }

  function httpCallback(done) {
    const conversationName = convo.dialogFlow2.payload.getConversationNameFromPayload(request.body);
    const conversationLanguage = convo.dialogFlow2.payload.getConversationLanguageFromPayload(request.body);
    console.log('Receiving conversation: %s, using language: %s', conversationName, conversationLanguage);

    var args = [];
    var opts = {
      apis: apis
    };
    <%
      /******************************************************************
       * Match input to the conversations defined in Convo spec
       ******************************************************************/
      const conversations = config.conversations();
      for (var i = 0, iLen = conversations.length; i < iLen; i++) {
    %>
    <% if (i > 0) { %>else<% } %> if (conversationName === '<%= conversations[i].name %>') {
      <%
        const languages = Object.keys(conversations[i].reply);
        for (var j = 0, jLen = languages.length; j < jLen; j++) {
      %>
      <% if (j > 0) { %>else<% } %> if (conversationLanguage === '<%= languages[j] %>') {
        var _apiCallback = apiCallback('<%= conversations[i].reply[languages[j]] %>', done);
        <% if (config.convoSpec.middlewares.openapi3_cloudfunctions.openapi3.node_modules.helper) { %>
          if (<%= config.id() %>Helper.callTarget) {
            var params = {};
            <%= config.id() %>Helper.foobar();
            <%= config.id() %>Helper.callTarget(<%= conversations[i].api %>, '<%= conversations[i].method %>', params, _apiCallback, opts);
          } else {
            args.push(_apiCallback);
            <%= conversations[i].api %>.<%= conversations[i].method %>(...args);
          }
        <% } else { %>
          args.push(_apiCallback);
          <%= conversations[i].api %>.<%= conversations[i].method %>(...args);
        <% } %>
      }
      <%
        }
      %>
      else {
        const replyPayload = convo.dialogFlow2.payload.createReplyPayload('Unsupported reply language: ' + conversationLanguage);
        done(null, replyPayload);
      }
    }
    <%
      }
    %>
    else {
      const replyPayload = convo.dialogFlow2.payload.createReplyPayload('Unsupported conversation: ' + conversationName);
      done(null, replyPayload);
    }
  }

  convo.dialogFlow2.http.handle(request, response, httpCallback);
};
